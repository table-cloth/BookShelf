package com.tablecloth.bookshelf.db;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.tablecloth.bookshelf.util.Const;

/**
 * Data access object Base class
 * All DaoXx class should override this class to manage same DB usage
 *
 * Created by shnomura on 2015/03/29.
 */
public class DaoBase {

//     // Basic info
//     private  int mSeriesId = -1;
//     private String mTitle;
//     private String mAuthor;
//     private String mCompany;
//     private String mMagazine;
//     private String mImagePath;
//
//     // Sub info
//     private String mTitlePronunciation;
//     private String mAuthorPronunciation;
//     private String mCompanyPronunciation;
//     private String mMagazinePronunciation;
//
//     //Additional info
//     private ArrayList<String> mTagsList;
//     private ArrayList<Integer> mVolumeList;
//     private String mMemo;
//     private boolean mIsSeriesComplete = false;
//
//     // Update info
//     private long mInitUpdateUnix;
//     private long mLastUpdateUnix;
//
//     // Cache
//     private Bitmap mImageCache;


    /**
     * Context
     */
    protected final Context mContext;

    /**
     * Constructor
     *
     * @param context context
     */
    public DaoBase(@NonNull Context context) {
        mContext = context;
    }

    /**
     * Checks whether the data is found, with given sql text
     *
     * @param sqlText sqlText to run on DB
     * @return Whether one or more data is found
     */
    protected boolean isDataAvailable(@NonNull String sqlText) {
        Cursor cursor = null;
        try {
            cursor = openCursor(sqlText);
            // check if cursor with any value is returned
            return cursor != null && cursor.moveToFirst();
        } finally {
            closeCursor(cursor);
        }
    }

    /**
     * Generates cursor with given sqlText
     * Once openCursor is called, closeCursor must be called after use
     *
     * @param sqlText sqlText to run on DB
     * @return Cursor instance, or null if not found
     */
    @Nullable
    public Cursor openCursor(@NonNull String sqlText) {
        return DB.getDB(mContext).getSQLiteDatabase(mContext).rawQuery(sqlText, null);
    }

    /**
     * Close cursor after used
     * This method must be called every time
     * after openCursor is called, if openCursor has returned non-null value
     *
     * @param cursor cursor generated by openCursor
     */
    public void closeCursor(@Nullable Cursor cursor) {
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }
    }

    /**
     * Get value from given key, in given cursor
     * Cursor will NOT be closed within this method
     *
     * @param cursor         cursor
     * @param columnIndexKey key name
     * @return value or null key is not valid
     */
    public String getStringFromCursor(@NonNull Cursor cursor, @NonNull String columnIndexKey) {
        return cursor.getString(cursor.getColumnIndex(columnIndexKey));
    }

    /**
     * Get value from given key, in given cursor
     * Cursor will NOT be closed within this method
     *
     * @param cursor         cursor
     * @param columnIndexKey key name
     * @return value or null key is not valid
     */
    public int getIntFromCursor(@NonNull Cursor cursor, @NonNull String columnIndexKey) {
        return cursor.getInt(cursor.getColumnIndex(columnIndexKey));
    }
}
